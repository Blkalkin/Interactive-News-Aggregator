{"version":3,"file":"main.js","mappings":"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","sources":["webpack://myjsp/./src/index.js"],"sourcesContent":["import './index.scss';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Part 1: Create and append the welcoming headline\n    const appContainer = document.getElementById('app'); // Ensure 'app' is the ID of your main container\n\n\n    // Part 2: Draggable Divider Functionality\n    const divider = document.getElementById('divider');\n    const topicsPane = document.getElementById('topics-pane');\n\n    let isDragging = false;\n\n    const updateWidth = (e) => {\n        const newWidth = e.clientX;\n        const appWidth = app.offsetWidth;\n        if (newWidth > 100 && newWidth < appWidth - 100) {\n            topicsPane.style.width = `${newWidth}px`;\n        }\n    };\n\n    divider.addEventListener('mousedown', (e) => {\n        e.preventDefault();\n        isDragging = true;\n    });\n\n    document.addEventListener('mousemove', (e) => {\n        if (isDragging) {\n            updateWidth(e);\n        }\n    });\n\n    document.addEventListener('mouseup', () => {\n        if (isDragging) {\n            isDragging = false;\n        }\n    });\n\n    // Part 3: Fetching Articles and Rendering Topic Header/Menu\n    fetchLatestArticles().then(() => {\n        setTimeout(() => {\n            console.log('Topic Header:', document.getElementById('topic-header'));\n            console.log('Topics Menu:', document.getElementById('topics-menu'));\n        }, 1000); // Adjust the timeout as needed\n    });\n\n\n});\n\n// Fetches latest articles and initializes the topic header with menu\nfunction fetchLatestArticles() {\n    console.log('fetchLatestArticles started'); // Log when function starts\n    return fetch('http://127.0.0.1:8000/latest_articles/')\n        .then(response => {\n            console.log('Response received'); // Log when response is received\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log('Data processed'); // Log when data is processed\n            const topics = Object.keys(data);\n            renderTopicHeader(topics, data);\n            renderArticlesByTopic(topics[0], data);\n            console.log('Topics Menu immediately after render:', document.getElementById('topics-menu'));\n        })\n        .catch(error => {\n            console.error('Could not get articles:', error);\n        });\n}\n\n\n\n// Renders the topic header and its menu\nfunction renderTopicHeader(topics, articlesData) {\n    console.log('renderTopicHeader started'); // Log when function starts\n\n    const appContainer = document.getElementById('app');\n    const topicHeader = document.createElement('div');\n    topicHeader.id = 'topic-header';\n    topicHeader.classList.add('topic-header');\n    appContainer.insertBefore(topicHeader, appContainer.firstChild);\n\n    const topicMenu = document.createElement('div');\n    topicMenu.id = 'topics-menu';\n    topicMenu.classList.add('topics-menu', 'hidden'); // Ensure this starts as hidden\n    console.log(\"topic header\",topicHeader);\n    topicHeader.appendChild(topicMenu);\n    console.log(\"hello world\",topicMenu);\n\n    topicHeader.textContent = topics[0];\n    topicHeader.addEventListener('click', () => {\n        console.log('Topic header clicked'); // Log when topic header is clicked\n        topicMenu.classList.toggle('hidden'); // This line toggles the visibility\n        console.log('Topic menu class list:', topicMenu.classList); // Log the class list of the topic menu\n    });\n\n    topics.forEach(topic => {\n        const topicOption = document.createElement('div');\n        topicOption.textContent = topic;\n        topicOption.classList.add('topic-option');\n        topicOption.addEventListener('click', () => {\n            console.log(`Topic option \"${topic}\" clicked`); // Log when a topic option is clicked\n            renderArticlesByTopic(topic, articlesData);\n            topicHeader.textContent = topic;\n            topicMenu.classList.add('hidden'); // Hide the menu after selection\n        });\n        topicMenu.appendChild(topicOption);\n    });\n\n    console.log('renderTopicHeader completed'); // Log when function ends\n}\n\n\n\n// Renders articles filtered by topic\nfunction renderArticlesByTopic(topic, articlesData) {\n    const articlesByTopic = articlesData[topic];\n    renderArticles(articlesByTopic);\n}\n\n// Renders articles to the DOM\nfunction renderArticles(articles) {\n    const topicsPane = document.getElementById('topics-pane');\n    topicsPane.innerHTML = ''; // Clear existing articles\n\n    articles.forEach(article => {\n        const articleElement = document.createElement('div');\n        articleElement.classList.add('article');\n\n        const titleElement = document.createElement('h3');\n        titleElement.textContent = article.title;\n        titleElement.classList.add('article-title');\n\n        const dateElement = document.createElement('i');\n        dateElement.textContent = `Published on ${article.publish_date}`;\n        dateElement.classList.add('article-date');\n\n        const infoContainer = document.createElement('div');\n        infoContainer.classList.add('info-container', 'hidden');\n\n        const expandButton = document.createElement('button');\n        expandButton.textContent = 'Expand Article';\n        expandButton.classList.add('expand-article');\n\n        const linkButton = document.createElement('a');\n        linkButton.textContent = 'Go to Site';\n        linkButton.href = article.url;\n        linkButton.target = '_blank';\n        linkButton.classList.add('go-to-site');\n\n        const contentContainer = document.createElement('div');\n        contentContainer.classList.add('content-container', 'hidden');\n\n        const bodyElement = document.createElement('p');\n        bodyElement.textContent = article.body;\n        bodyElement.classList.add('article-body');\n\n        contentContainer.appendChild(bodyElement);\n        infoContainer.appendChild(expandButton);\n\n        titleElement.addEventListener('click', () => {\n            infoContainer.classList.toggle('hidden');\n        });\n\n        expandButton.addEventListener('click', (event) => {\n            event.stopPropagation();\n            contentContainer.classList.toggle('hidden');\n            if (!contentContainer.classList.contains('hidden')) {\n                infoContainer.appendChild(linkButton);\n            } else {\n                if (infoContainer.contains(linkButton)) {\n                    infoContainer.removeChild(linkButton);\n                }\n            }\n            expandButton.textContent = contentContainer.classList.contains('hidden') ? 'Expand Article' : 'Collapse Article';\n        });\n\n        articleElement.appendChild(titleElement);\n        articleElement.appendChild(dateElement);\n        articleElement.appendChild(infoContainer);\n        articleElement.appendChild(contentContainer);\n        topicsPane.appendChild(articleElement);\n        // Set the article ID on the element for drag and drop\n        articleElement.dataset.articleId = article.id;\n\n        // Set up drag start event\n        articleElement.setAttribute('draggable', true);\n        articleElement.addEventListener('dragstart', (e) => {\n            e.dataTransfer.setData('text/plain', e.target.dataset.articleId);\n        });\n\n        // Append the articleElement to the topicsPane\n        topicsPane.appendChild(articleElement);\n    });\n\n    // Initialize the drop zone\n    initializeDropZone();\n}\n\nfunction initializeDropZone() {\n    const responsePane = document.getElementById('response-pane');\n    responsePane.addEventListener('dragover', (e) => {\n        e.preventDefault(); // Necessary to allow drop\n    });\n\n    responsePane.addEventListener('drop', (e) => {\n        e.preventDefault();\n        const articleId = e.dataTransfer.getData('text/plain');\n        responsePane.dataset.selectedArticleId = articleId; // Store the ID on the drop zone\n        // You might want to do something with the dropped article here\n    });\n}\n\n\nfunction analyzeArticle(articleId, questionText) {\n    // Display the question in the chat\n    addChatMessage(questionText, true);\n\n    fetch('http://127.0.0.1:8000/analyze_article/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ article_id: articleId, question_text: questionText }),\n    })\n        .then(response => response.json())\n        .then(data => {\n            // Display the server's response in the chat\n            console.log(data)\n            addChatMessage(data.response.choices[0].message.content, false);\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n}\n\n\ndocument.getElementById('submit-button').addEventListener('click', () => {\n    const userInput = document.getElementById('user-input');\n    const questionText = userInput.value;\n    const articleId = document.getElementById('response-pane').dataset.selectedArticleId;\n\n    if (questionText && articleId) {\n        analyzeArticle(articleId, questionText);\n        userInput.value = ''; // Clear the input field after submitting\n    }\n});\n\nfunction addChatMessage(text, isQuestion) {\n    const responsePane = document.getElementById('response-pane');\n    const messageDiv = document.createElement('div');\n    messageDiv.textContent = text;\n    messageDiv.className = isQuestion ? 'chat-message question' : 'chat-message response';\n    // Ensure the new message is added above the input container\n    const inputContainer = document.getElementById('input-container');\n    responsePane.insertBefore(messageDiv, inputContainer);\n    // Scroll to the bottom of the response pane to show the latest message\n    responsePane.scrollTop = responsePane.scrollHeight;\n}\n"],"names":["renderArticlesByTopic","topic","articlesData","articles","topicsPane","document","getElementById","innerHTML","forEach","article","articleElement","createElement","classList","add","titleElement","textContent","title","dateElement","publish_date","infoContainer","expandButton","linkButton","href","url","target","contentContainer","bodyElement","body","appendChild","addEventListener","toggle","event","stopPropagation","contains","removeChild","dataset","articleId","id","setAttribute","e","dataTransfer","setData","responsePane","preventDefault","getData","selectedArticleId","initializeDropZone","renderArticles","addChatMessage","text","isQuestion","messageDiv","className","inputContainer","insertBefore","scrollTop","scrollHeight","divider","isDragging","newWidth","clientX","appWidth","app","offsetWidth","style","width","updateWidth","console","log","fetch","then","response","ok","Error","status","json","data","topics","Object","keys","appContainer","topicHeader","firstChild","topicMenu","topicOption","renderTopicHeader","catch","error","setTimeout","userInput","questionText","value","method","headers","JSON","stringify","article_id","question_text","choices","message","content","analyzeArticle"],"sourceRoot":""}